
RICORA Site Generator
=====================


## 概要
このソフトはRicoraのサイトを生成してデプロイまでしちゃうプログラムです。
RubyGemsの、静的サイト生成フレームワーク[nanoc](https://nanoc.ws)を使ってるよ。なので、ちゃんと理解したい人は[nanoc](https://nanoc.ws)のページを見ればいいと思うよ。

## 各ディレクトリの説明
##### `/content`
ページのソースとなるファイルがおいてあるディレクトリです。
##### `/layouts`
ページのレイアウトファイル(テンプレート)が置いてあるディレクトリです。
##### `/output`
ページを実際にコンパイルすると、このディレクトリ以下にファイルが出力されます。
##### `/commands`
nanoc追加サブコマンドを定義してあります。
##### `/lib`
拡張ライブラリです、通常触る必要ないです。
##### `/sitedata`
サイトグローバルなデータを置いてあります。メニューの構造を記述したファイルとか、Recent update的なことを書いたファイルも置いてあります。
##### その他
nanocが`/tmp`とかその他諸々作るけど気にしない。

### プロジェクトルートの各ファイルの説明
##### `/Rules`
ページ生成手順を記述したファイルです
##### `/config.yaml`
設定を記述したファイルです
##### `/Gemfile`,`Rakefile`
RubyやRubyGems関連のファイルです。通常触る必要ないです。
##### `/README.markdown`
このファイル

## ページ編集の仕方
`/content`以下のページの記述には、軽量マークアップ言語`markdown`を用いて記述することができます。
実際の処理は[`kramdown`](http://kramdown.rubyforge.org/)を使って処理するので、`markdown`標準よりも拡張されたマークアップを行うことが可能です。詳しくは[kramdown - syntax](http://kramdown.rubyforge.org/syntax.html)を見てください。
ファイルを書けばそのままそれがコンパイルされて`/output`以下にできます。

## ページ発行のしかた
### コンパイル
コンパイルをすると`/content`以下のファイルが`/output`以下に生成されます。コンパイルには、プロジェクトルートディレクトリでで

	nanoc compile

または、省略形で

	nanoc co

を実行してください。

### アップロード
まず、当然だけど理科大のricoraのアカウントにログインできる必要があります。SSHを使うので鍵を登録しておくことをお勧めします。コンパイル同様に

	nanoc deploy

を実行してください。省略形として

    nanoc dep


とすることも出来ます。`rsync`を使って理科大のサーバーへファイルを配置します。

## `/sitedata`以下云々
`/sitedata`ディレクトリには、ページをレンダリングする上で必要なデータが置かれています。たとえば
* メニューの定義
* ニュースフィード
* ブログのテンプレート
等です。これらのファイルは`/lib`以下の拡張ライブラリ経由で`/leyouts`内にあるテンプレートファイル内で使われるものが多いです。

## `/lib`以下に追加した拡張モジュール
っていっても数行しかないので、見てもらった方が早いと思いますが、`/lib/context.rb`は`/sitedata`以下のファイルを読み込んでるだけ、`/lib/default.rb`と`/lib/helpers.rb`はほとんどテンプレートやnanocのサイトにあるものを貼り付けただけです。

## `/commands`ディレクトリ

    nanoc …

と使える`nanoc`拡張コマンドを定義してあります。ファイルは`Ruby`で記述してあり、文法はたぶん`nanoc`か何かのコマンド用DSLです。詳細は、基底クラスにしている`Nanoc3::CLI::Commands`やその周りのファイルを見てください。

## 引き継ぎ
githubでファイル管理してるし、世代が変わってまだこのシステムを引き継ぐなら、適当にforkしてやってください。

